---
- name: Deploy ArgoCD to Openshift
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Ensure that the target_env variable is set
      fail:
        msg: "target_env variable must be set"
      when: "target_env is undefined"

    - name: Load the common vars file
      include_vars:
        file: "vars/common-vars.yaml"

    - name: Load the appropriate vars file
      include_vars:
        file: "vars/{{ target_env }}-vars.yaml"

    - name: Verify cluster object deployment
      set_fact:
        cluster_admin: "{{ cluster_admin | default(True) }}"

    - name: Load gpg key
      include_vars:
        file: "vars/gpg-keys/{{ target_env }}-key.yaml"

    - name: Ensure that the required variables are set
      fail:
        msg: "Required variable '{{ item }}' was not found"
      when: "{{ item }} is undefined"
      with_items:
        - kubeconfig
        - namespace
        - gpg_key
        - repo_server_image

    - name: Verify namespace exists
      k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        verify_ssl: "no"
      when: target_env == 'dev'

    - name: Deploy the ArgoCD objects to Openshift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: "{{ lookup('template', item) }}"
      with_items:
        - objects/secret.yaml
        - objects/namespace-install.yaml
        - objects/argocd_server_route.yaml

    - name: Deploy the ArgoCD Prod only objects to Openshift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: "{{ lookup('template', item) }}"
      with_items:
        - objects/srcops-secret.yaml
      when: (target_env == 'prod')

    - name: Create cluster specs
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: "{{ lookup('template', 'objects/clusters.yaml') }}"
      with_items: "{{ clusters | default([]) }}"
      loop_control:
        loop_var: cluster
      no_log: "True"

    - name: Get OpenShift API server
      shell: oc whoami --show-server
      register: api_server

    - name: Get Dex Service Account
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        kind: ServiceAccount
        name: argocd-dex-server
        namespace: "{{ namespace }}"
        verify_ssl: "no"
      register: dex_sa

    - name: Get Dex Service Account Secrets
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        kind: Secret
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        verify_ssl: "no"
      register: dex_sa_secrets
      when: "'token' in item.name"
      with_items: "{{ dex_sa.resources[0].secrets }}"

    - set_fact:
        dex_sa_token: "{{ item.resources[0].data.token | b64decode }}"
      when: "'resources' in item"
      with_items: "{{ dex_sa_secrets.results }}"
      no_log: "True"

# TODO: Figure out why k8s_info cannot retrieve this route
#    - name: Get the ArgoCD Server Route
#      k8s_info:
#        kubeconfig: "{{ kubeconfig }}"
#        kind: Route
#        name: argocd-server
#        namespace: "{{ namespace }}"
#        verify_ssl: "no"
#      register: server_route

    - name: Get the ArgoCD Server Route via shell
      shell: |
        oc get route argocd-server -o jsonpath='{.spec.host}' -n {{ namespace }}
      register: server_route

    - name: Set Dex Connecter fields
      set_fact:
        argocd_url: "https://{{ server_route.stdout }}"
        issuer: "{{ api_server.stdout }}"
        clientID: "system:serviceaccount:{{ namespace }}:argocd-dex-server"
        clientSecret: "{{ dex_sa_token }}"
        redirectURI: "https://{{ server_route.stdout }}/api/dex/callback"


    - name: Apply patches
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: "{{ lookup('template', 'objects/patches/'+item.path ) }}"
        merge_type:
          - merge
      with_filetree: objects/patches/

    - name: Get Application Controller Service Account
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        kind: ServiceAccount
        name: argocd-application-controller
        namespace: "{{ namespace }}"
        verify_ssl: "no"
      register: appctrl_sa

    - name: Get Application Controller Service Account Secrets
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        kind: Secret
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        verify_ssl: "no"
      register: appctrl_sa_secrets
      when: "'token' in item.name"
      with_items: "{{ appctrl_sa.resources[0].secrets }}"

    - set_fact:
        appctrl_sa_token: "{{ item.resources[0].data.token | b64decode }}"
      when: "'resources' in item"
      with_items: "{{ appctrl_sa_secrets.results }}"
      no_log: "True"

    - name: Deploy ArgoCD Projects
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        api_key: "{{ appctrl_sa_token }}"
        definition: "{{ lookup('template', 'objects/projects/'+item.path ) }}"
      with_filetree: objects/projects/
      when: target_env == 'prod'

    - name: Get all applications
      find:
        paths: objects/applications/
        recurse: yes
      register: argocd_apps

    - name: Deploy ArgoCD Applications
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: "{{ lookup('template', file.path ) }}"
        api_key: "{{ appctrl_sa_token }}"
      with_items: "{{ argocd_apps.files }}"
      loop_control:
        loop_var: file
      when: target_env == 'prod'
